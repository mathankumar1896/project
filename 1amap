import java.io.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.fs.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.*;


public class data {
	
	public static class MapClass extends Mapper<LongWritable,Text,LongWritable,Text>
	   {
	      public void map(LongWritable key, Text value, Context context)
	      {	    	  
	         try{
	        	 String[] str = value.toString().split("\t");
			  		long year = Long.parseLong(str[7]);
			  		String jobname = str[4];
			  		if(jobname.equals("DATA ENGINEER"))
			  		{
	             
	             context.write(new LongWritable(year),new Text(jobname));
	         }}
	         catch(Exception e)
	         {
	            System.out.println(e.getMessage());
	         }
	      }
	   }
	
	  public static class ReduceClass extends Reducer<LongWritable,Text,LongWritable,LongWritable>
	   {
		    //private IntWritable result = new IntWritable(0);
		    
		    
		    
		    public void reduce(LongWritable key, Iterable<Text> values,Context context) throws IOException, InterruptedException {
		    	long count=0;
			  	for (Text val : values)
		         {  
			  		
			  		count++;
			  		
		        	
		        	}	
			  	context.write(key, new LongWritable(count));
		      
		    }
	   }
	  public static void main(String[] args) throws Exception {
		    Configuration conf = new Configuration();
		    Job job = Job.getInstance(conf, "Offence percentage");
		    job.setJarByClass(data.class);
		    job.setMapperClass(MapClass.class);
		    //job.setCombinerClass(ReduceClass.class);
		    job.setReducerClass(ReduceClass.class);
		    //job.setNumReduceTasks(2);
		    job.setMapOutputKeyClass(LongWritable.class);
		    job.setMapOutputValueClass(Text.class);
		    job.setOutputKeyClass(LongWritable.class);
		    job.setOutputValueClass(LongWritable.class);
		    FileInputFormat.addInputPath(job, new Path(args[0]));
		    FileOutputFormat.setOutputPath(job, new Path(args[1]));
		    System.exit(job.waitForCompletion(true) ? 0 : 1);
		  }
}
